#!/bin/bash

# =============================================================================
# SCRIPT PARA INICIAR O BACKEND EM PRODU√á√ÉO
# =============================================================================
# Este script compila, instala depend√™ncias e inicia o backend
# Pode ser usado manualmente ou pelo PM2
# =============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ INICIANDO BACKEND EM PRODU√á√ÉO${NC}"
echo -e "${BLUE}================================${NC}"

# Obter diret√≥rio do script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKEND_DIR="$(dirname "$SCRIPT_DIR")"

cd "$BACKEND_DIR"

echo -e "${YELLOW}üìÅ Diret√≥rio: $BACKEND_DIR${NC}"

# =============================================================================
# 1. VERIFICAR VARI√ÅVEIS DE AMBIENTE
# =============================================================================
echo -e "${YELLOW}üîç Verificando vari√°veis de ambiente...${NC}"

if [ ! -f ".env" ]; then
    echo -e "${RED}‚ùå Arquivo .env n√£o encontrado!${NC}"
    echo -e "${YELLOW}Crie o arquivo .env com as seguintes vari√°veis:${NC}"
    echo -e "${BLUE}  DATABASE_URL=mysql://user:password@host:3306/database${NC}"
    echo -e "${BLUE}  JWT_SECRET=your-secret-key${NC}"
    echo -e "${BLUE}  NODE_ENV=production${NC}"
    echo -e "${BLUE}  PORT=3001${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Arquivo .env encontrado${NC}"

# Carregar vari√°veis de ambiente
source .env

# Verificar vari√°veis obrigat√≥rias
if [ -z "$DATABASE_URL" ]; then
    echo -e "${RED}‚ùå DATABASE_URL n√£o definida no .env${NC}"
    exit 1
fi

if [ -z "$JWT_SECRET" ]; then
    echo -e "${RED}‚ùå JWT_SECRET n√£o definida no .env${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Vari√°veis de ambiente configuradas${NC}"

# =============================================================================
# 2. INSTALAR DEPEND√äNCIAS
# =============================================================================
echo -e "${YELLOW}üì¶ Instalando depend√™ncias...${NC}"

if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}Instalando todas as depend√™ncias...${NC}"
    npm ci
else
    echo -e "${GREEN}‚úÖ Depend√™ncias j√° instaladas${NC}"
fi

# =============================================================================
# 3. GERAR PRISMA CLIENT
# =============================================================================
echo -e "${YELLOW}üîß Gerando Prisma Client...${NC}"

npx prisma generate

echo -e "${GREEN}‚úÖ Prisma Client gerado${NC}"

# =============================================================================
# 4. VERIFICAR CONEX√ÉO COM BANCO DE DADOS
# =============================================================================
echo -e "${YELLOW}üîç Verificando conex√£o com banco de dados...${NC}"

if npx prisma db execute --stdin <<< "SELECT 1;" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Conex√£o com banco de dados OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  N√£o foi poss√≠vel verificar conex√£o com banco${NC}"
    echo -e "${YELLOW}Continuando mesmo assim...${NC}"
fi

# =============================================================================
# 5. COMPILAR TYPESCRIPT (OPCIONAL)
# =============================================================================
echo -e "${YELLOW}üî® Compilando TypeScript...${NC}"

if npm run build > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ TypeScript compilado com sucesso${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Erro ao compilar TypeScript${NC}"
    echo -e "${YELLOW}Continuando com tsx...${NC}"
fi

# =============================================================================
# 6. INICIAR SERVIDOR
# =============================================================================
echo -e "${YELLOW}üöÄ Iniciando servidor...${NC}"

# Verificar se deve usar tsx ou node
if command -v tsx &> /dev/null && [ -f "src/server.ts" ]; then
    echo -e "${GREEN}‚úÖ Usando tsx (resolve aliases @/)${NC}"
    echo -e "${BLUE}Servidor iniciando na porta ${PORT:-3001}...${NC}"
    exec tsx src/server.ts
elif [ -f "dist/server.js" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  tsx n√£o encontrado, usando node${NC}"
    echo -e "${BLUE}Servidor iniciando na porta ${PORT:-3001}...${NC}"
    exec node dist/server.js
else
    echo -e "${RED}‚ùå N√£o foi poss√≠vel iniciar o servidor${NC}"
    echo -e "${RED}Nem tsx nem dist/server.js encontrados${NC}"
    exit 1
fi
