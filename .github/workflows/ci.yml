name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    env:
      # GitHub Actions MySQL credentials (different from local development)
      # Local: root:root | CI: root:password
      DATABASE_URL: mysql://root:password@localhost:3306/work_with_us_test_db
      JWT_SECRET: test-jwt-secret-key
      NODE_ENV: test
    
    strategy:
      matrix:
        node-version: [20.x, 21.x]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: work_with_us_test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: false
        
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Generate Prisma client
      run: |
        cd backend
        npm run db:generate
        
    - name: Setup test database
      run: |
        cd backend
        npx prisma db push --force-reset
        
    - name: Run linting
      run: |
        cd backend
        npm run lint
        
    - name: Run unit tests (Controllers)
      run: |
        cd backend
        npm run test:controllers
        
    - name: Run unit tests (Services)
      run: |
        cd backend
        npm run test:services
        
    - name: Run unit tests (Utils)
      run: |
        cd backend
        npm run test:utils
        
    - name: Run E2E tests
      run: |
        cd backend
        npm run test:e2e
        
    - name: Run all tests
      run: |
        cd backend
        npm run test:all
        
    - name: Generate test coverage
      run: |
        cd backend
        npm run test:coverage
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: false
        
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Generate Prisma client
      run: |
        cd backend
        npm run db:generate
        
    - name: Build application
      run: |
        cd backend
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: backend/dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: false
        
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run security audit
      run: |
        cd backend
        echo "üîç Checking for critical vulnerabilities..."
        npm audit --audit-level critical
        echo "‚úÖ No critical vulnerabilities found"
        echo ""
        echo "‚ÑπÔ∏è  Production dependencies audit (moderate and above):"
        npm audit --omit=dev --audit-level moderate || echo "‚ö†Ô∏è  Found moderate vulnerabilities in production dependencies. Review recommended."
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: docker build, kubectl apply, etc.
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: docker build, kubectl apply, etc.
