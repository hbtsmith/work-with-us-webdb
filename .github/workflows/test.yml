name: Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Generate Prisma client
      run: |
        cd backend
        npm run db:generate
        
    - name: Setup test database
      run: |
        cd backend
        npx prisma db push --force-reset
        
    - name: Run Controllers Tests
      run: |
        cd backend
        npm run test:controllers
        
    - name: Run Services Tests
      run: |
        cd backend
        npm run test:services
        
    - name: Run Utils Tests
      run: |
        cd backend
        npm run test:utils
        
    - name: Generate coverage report
      run: |
        cd backend
        npm run test:coverage
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage/lcov.info
        flags: unittests
        name: unit-tests-coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Generate Prisma client
      run: |
        cd backend
        npm run db:generate
        
    - name: Setup test database
      run: |
        cd backend
        npx prisma db push --force-reset
        
    - name: Run E2E Tests
      run: |
        cd backend
        npm run test:e2e
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: backend/test-results/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Generate Prisma client
      run: |
        cd backend
        npm run db:generate
        
    - name: Setup test database
      run: |
        cd backend
        npx prisma db push --force-reset
        
    - name: Run all tests
      run: |
        cd backend
        npm run test:all
        
    - name: Generate comprehensive coverage
      run: |
        cd backend
        npm run test:coverage
        
    - name: Upload comprehensive coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage/lcov.info
        flags: integration
        name: integration-tests-coverage

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, integration-tests]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## ðŸ§ª Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### âœ… Unit Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Controllers: 62/62 tests passing" >> $GITHUB_STEP_SUMMARY
        echo "- Services: 67/67 tests passing" >> $GITHUB_STEP_SUMMARY
        echo "- Utils: 35/35 tests passing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”„ E2E Tests" >> $GITHUB_STEP_SUMMARY
        echo "- All E2E tests passing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Total Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- 164/164 unit tests passing (100%)" >> $GITHUB_STEP_SUMMARY
        echo "- All E2E tests passing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸŽ‰ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
